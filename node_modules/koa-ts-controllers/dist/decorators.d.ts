import 'reflect-metadata';
export declare function Controller(baseRoute?: string): (classDefinition: Function) => void;
export declare function Get(path: string | RegExp): (object: Object, methodName: string) => void;
export declare function Post(path: string | RegExp): (object: Object, methodName: string) => void;
export declare function Put(path: string | RegExp): (object: Object, methodName: string) => void;
export declare function Patch(path: string | RegExp): (object: Object, methodName: string) => void;
export declare function Delete(path: string | RegExp): (object: Object, methodName: string) => void;
export declare function Version(version: string, endpointDeprecationWarning?: string): (object: Object, methodName: string) => void;
/**
 * Flow is an array of middleware you want to run prior to the controller action.
 * This is where you implement constraints like authentication, authorization and similar pre-checks.
 * @param flow
 * @constructor
 */
export declare function Flow(flow: Function | Array<Function>): (object: Object | Function, methodName?: string) => void;
export declare function Header(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
export interface IValidationDecoratorOptions {
    validClass?: Function;
    required?: boolean;
    trim?: boolean;
}
export declare function Body(injectOptions?: string | IValidationDecoratorOptions): (object: Object, methodName: string, index: number) => void;
export declare function Session(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
export declare function State(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
export declare function Cookie(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
export declare function Req(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
export declare function Res(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
export declare function Params(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
export declare function Query(injectOptions?: string | IValidationDecoratorOptions): (object: Object, methodName: string, index: number) => void;
/**
 * OBSOLETE:
 * Direct file upload is not recommended for server.
 * Client should handle upload of content to S3-compatible service by itself.
 * If it is a private/encrypted file, client can hit an endpoint from the server to create and send the client a key
 * which is then stored and can be used to encrypt the file.
 */
/**
 * Injects the full Koa context. Try not to do this if you don't have to.
 * @param injectOptions
 * @constructor
 */
export declare function Ctx(injectOptions?: string | Object): (object: Object, methodName: string, index: number) => void;
