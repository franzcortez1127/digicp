"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const koa_1 = __importDefault(require("koa"));
const index_1 = require("../index");
let app;
let nativeServer;
let testServer;
beforeAll(async () => {
    app = new koa_1.default();
    await index_1.bootstrapControllers(app, {
        basePath: '/api',
        controllers: [__dirname + '/util/controllers/**/*.ts'],
        boomifyErrors: true,
        initBodyParser: true,
        versions: ['1', '2'],
        disableVersioning: true // overwrites and cancels versions if present => /apiBase/controller/action
    });
    nativeServer = app.listen();
    testServer = supertest_1.default(nativeServer);
});
afterAll((done) => {
    if (nativeServer.listening) {
        nativeServer.close(done);
    }
    else {
        done();
    }
});
describe('Bootstrap option', () => {
    describe('disableVersioning', () => {
        it('works', async () => {
            const response = await testServer
                .get('/api/action') // no longer /api/v.../action
                .expect(200);
            expect(response.text).toEqual('okay');
        });
        it('ignores @Version', async () => {
            const response = await testServer
                .get('/api/action/mmm') // no longer /api/v.../action/mmm
                .expect(200);
            expect(response.text).toEqual('mmm');
        });
    });
});
//# sourceMappingURL=bootstrap.disableVersioning.test.js.map