"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const importClasses_1 = require("./util/importClasses");
const generateRoutes_1 = require("./util/generateRoutes");
const boom_1 = __importDefault(require("@hapi/boom"));
const koa_cookie_1 = __importDefault(require("koa-cookie"));
exports.metadata = {
    controllers: {}
};
function getControllers() {
    return exports.metadata.controllers;
}
exports.getControllers = getControllers;
const handleRestErrors = async (ctx, next) => {
    try {
        await next();
    }
    catch (err) {
        if (err.isBoom) {
            const error = err.output.payload;
            error.errorDetails = error.statusCode >= 500 ? null : err.data;
            ctx.body = error;
            ctx.status = error.statusCode;
            if (error.statusCode >= 500)
                console.error(err);
        }
        else {
            ctx.body = { error: 'Internal Server Error' };
            ctx.status = 500;
            console.error(err);
        }
    }
};
exports.controllers = {};
/**
 *
 * @param app - Koa instance
 * @param params - IKoaControllerOptions
 */
exports.bootstrapControllers = async (app, params) => {
    exports.options = params;
    exports.options.versions = exports.options.versions || { 1: true };
    exports.options.flow = exports.options.flow || [];
    exports.options.boomifyErrors = params.boomifyErrors === false ? false : true;
    /**
     * Versions can be defined in multiple ways.
     * If an array, it's just a list of active versions.
     * If as an object, then this datastructure can define not only active versions but obsolete versions as well.
     *
     * The object is the native form. Arrays are converted to object.
     */
    if (Array.isArray(exports.options.versions)) {
        const versions = {};
        exports.options.versions.forEach(version => {
            versions[version] = true;
        });
        exports.options.versions = versions;
    }
    if (!exports.options.router) {
        exports.options.router = new (require('koa-router'))();
        exports.options.attachRoutes = true;
    }
    if (exports.options.boomifyErrors) {
        // error handler
        app.use(handleRestErrors);
    }
    importClasses_1.importClassesFromDirectories(exports.options.controllers);
    if (params.initBodyParser) {
        // Enable bodyParser with default options
        app.use((require('koa-body'))({ multipart: true }));
        // app.use((require('koa-bodyparser'))());
        // app.use(bodyParser());
    }
    // parses cookies
    app.use(koa_cookie_1.default());
    await generateRoutes_1.generateRoutes(exports.options.router, exports.options, exports.metadata);
    if (exports.options.attachRoutes) {
        // Combine routes
        app.use(exports.options.router.routes());
        app.use(exports.options.router.allowedMethods({
            methodNotAllowed: () => boom_1.default.notFound(),
            notImplemented: () => boom_1.default.notImplemented(),
            throw: true,
        }));
    }
};
var decorators_1 = require("./decorators");
exports.Controller = decorators_1.Controller;
exports.Ctx = decorators_1.Ctx;
exports.State = decorators_1.State;
exports.Body = decorators_1.Body;
exports.Cookie = decorators_1.Cookie;
exports.Delete = decorators_1.Delete;
exports.Flow = decorators_1.Flow;
exports.Get = decorators_1.Get;
exports.Header = decorators_1.Header;
exports.Params = decorators_1.Params;
exports.Patch = decorators_1.Patch;
exports.Post = decorators_1.Post;
exports.Put = decorators_1.Put;
exports.Query = decorators_1.Query;
exports.Req = decorators_1.Req;
exports.Res = decorators_1.Res;
exports.Session = decorators_1.Session;
exports.Version = decorators_1.Version;
__export(require("class-validator"));
//# sourceMappingURL=index.js.map