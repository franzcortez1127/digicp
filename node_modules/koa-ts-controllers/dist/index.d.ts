export interface IKoaControllerOptions {
    controllers: Array<string>;
    basePath?: string;
    versions?: Array<number | string> | object;
    disableVersioning?: boolean;
    initBodyParser?: boolean;
    boomifyErrors?: boolean;
    attachRoutes?: boolean;
    router?: any;
    flow?: Array<Function>;
}
export declare let options: IKoaControllerOptions;
export declare const metadata: {
    controllers: {};
};
export interface ControllerCodex {
    [k: string]: {
        actions: {
            [ak: string]: {
                flow?: Array<Function>;
                verb: string;
                path: string;
                target: Function;
                argumentTypes?: Array<any>;
            };
        };
        path: String;
        class: any;
    };
}
export declare function getControllers(): ControllerCodex;
export declare let controllers: {};
/**
 *
 * @param app - Koa instance
 * @param params - IKoaControllerOptions
 */
export declare const bootstrapControllers: (app: any, params: IKoaControllerOptions) => Promise<void>;
export { Controller, Ctx, State, Body, Cookie, Delete, Flow, Get, Header, Params, Patch, Post, Put, Query, Req, Res, Session, Version } from './decorators';
export * from 'class-validator';
